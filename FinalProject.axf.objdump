
FinalProject.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 a4 0b 00 00 a8 0b 00 00 ac 0b 00 00     @...............
  30:	b0 0b 00 00 a0 0b 00 00 b4 0b 00 00 b8 0b 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	ip, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	ip!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, ip
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, ip
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	ip, r2, r3
  bc:	e15e000c 	cmp	lr, ip
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000298 	bl	b3c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000cb8 	.word	0x00000cb8

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000010f0 	.word	0x000010f0

00000124 <__cs3_heap_start_ptr>:
 124:	00001118 	.word	0x00001118

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000010f8 	.word	0x000010f8
 170:	000010fb 	.word	0x000010fb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000010f8 	.word	0x000010f8
 1bc:	000010f8 	.word	0x000010f8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000010f8 	.word	0x000010f8
 200:	00000000 	.word	0x00000000
 204:	00000c44 	.word	0x00000c44

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000c44 	.word	0x00000c44
 250:	000010fc 	.word	0x000010fc
 254:	00000cb8 	.word	0x00000cb8
 258:	00000000 	.word	0x00000000

0000025c <readSwitches>:
} ADC; 

volatile GPIO * const gpio_ptr = ( unsigned int *) JP1_BASE;
volatile ADC * const adc_ptr = ( ADC *) ADC_BASE;

int readSwitches(void) {    
 25c:	e24dd008 	sub	sp, sp, #8
	volatile unsigned int * switchPtr = (unsigned int *) SW_BASE;
	volatile int switchInput;     
	switchInput = *switchPtr & 0x1;     
 260:	e3a03000 	mov	r3, #0
 264:	e34f3f20 	movt	r3, #65312	; 0xff20
 268:	e5933040 	ldr	r3, [r3, #64]	; 0x40
 26c:	e2033001 	and	r3, r3, #1
 270:	e58d3004 	str	r3, [sp, #4]
	return switchInput;
 274:	e59d0004 	ldr	r0, [sp, #4]
}
 278:	e28dd008 	add	sp, sp, #8
 27c:	e12fff1e 	bx	lr

00000280 <readVoltage>:

// read voltage from adc
int readVoltage(num) {     
	int voltage;     
	if (num == 0){         
 280:	e3500000 	cmp	r0, #0
 284:	1a000005 	bne	2a0 <readVoltage+0x20>
		// just reads 0-11 bits
		voltage = adc_ptr->ch0 & 0xfff;     
 288:	e3a03901 	mov	r3, #16384	; 0x4000
 28c:	e34f3f20 	movt	r3, #65312	; 0xff20
 290:	e5933000 	ldr	r3, [r3]
 294:	e1a03a03 	lsl	r3, r3, #20
 298:	e1a03a23 	lsr	r3, r3, #20
 29c:	ea000005 	b	2b8 <readVoltage+0x38>
	}     else if (num == 1) {         
 2a0:	e3500001 	cmp	r0, #1
		voltage = adc_ptr->ch1 & 0xfff;     
 2a4:	03a03901 	moveq	r3, #16384	; 0x4000
 2a8:	034f3f20 	movteq	r3, #65312	; 0xff20
 2ac:	05933004 	ldreq	r3, [r3, #4]
 2b0:	01a03a03 	lsleq	r3, r3, #20
 2b4:	01a03a23 	lsreq	r3, r3, #20
	}     
	return voltage; 
} 
 2b8:	e1a00003 	mov	r0, r3
 2bc:	e12fff1e 	bx	lr

000002c0 <voltageToPercent>:
	
int voltageToPercent(value, normalized) {     
 2c0:	e92d4008 	push	{r3, lr}
	int ledOn;     
	int voltAsPercent;
	// 4096 = max voltage (2^12 bits)     
	voltAsPercent = (value*10)/normalized; 
 2c4:	e0800100 	add	r0, r0, r0, lsl #2
 2c8:	e1a00080 	lsl	r0, r0, #1
 2cc:	eb0000fc 	bl	6c4 <__aeabi_idiv>
	
	// 12 bit number, and reference voltage     
	if (voltAsPercent == 0) {         
 2d0:	e3500000 	cmp	r0, #0
 2d4:	0a000015 	beq	330 <voltageToPercent+0x70>
		ledOn = 0b0;     
	}     else if (voltAsPercent == 1) {        
 2d8:	e3500001 	cmp	r0, #1
 2dc:	0a000015 	beq	338 <voltageToPercent+0x78>
		 ledOn = 0b1;     
	}     else if (voltAsPercent == 2) {         
 2e0:	e3500002 	cmp	r0, #2
 2e4:	0a000015 	beq	340 <voltageToPercent+0x80>
		ledOn = 0b11;     
	}     else if (voltAsPercent == 3) {         
 2e8:	e3500003 	cmp	r0, #3
 2ec:	0a000015 	beq	348 <voltageToPercent+0x88>
		ledOn = 0b111;     
	}     else if (voltAsPercent == 4) {         
 2f0:	e3500004 	cmp	r0, #4
 2f4:	0a000015 	beq	350 <voltageToPercent+0x90>
		ledOn = 0b1111;     
	}     else if (voltAsPercent == 5) {         
 2f8:	e3500005 	cmp	r0, #5
 2fc:	0a000015 	beq	358 <voltageToPercent+0x98>
		ledOn = 0b11111;     
	}     else if (voltAsPercent == 6) {         
 300:	e3500006 	cmp	r0, #6
 304:	0a000015 	beq	360 <voltageToPercent+0xa0>
			ledOn = 0b111111;     
	}     else if (voltAsPercent == 7) {         
 308:	e3500007 	cmp	r0, #7
 30c:	0a000015 	beq	368 <voltageToPercent+0xa8>
		ledOn = 0b1111111;    
    }     else if (voltAsPercent == 8) {
 310:	e3500008 	cmp	r0, #8
 314:	0a000015 	beq	370 <voltageToPercent+0xb0>
		         ledOn = 0b11111111;     
	}     else if (voltAsPercent == 9) {         
		ledOn = 0b111111111;     
 318:	e30031ff 	movw	r3, #511	; 0x1ff
 31c:	e30023ff 	movw	r2, #1023	; 0x3ff
 320:	e3500009 	cmp	r0, #9
 324:	11a00002 	movne	r0, r2
 328:	01a00003 	moveq	r0, r3
 32c:	e8bd8008 	pop	{r3, pc}
	// 4096 = max voltage (2^12 bits)     
	voltAsPercent = (value*10)/normalized; 
	
	// 12 bit number, and reference voltage     
	if (voltAsPercent == 0) {         
		ledOn = 0b0;     
 330:	e3a00000 	mov	r0, #0
 334:	e8bd8008 	pop	{r3, pc}
	}     else if (voltAsPercent == 1) {        
		 ledOn = 0b1;     
 338:	e3a00001 	mov	r0, #1
 33c:	e8bd8008 	pop	{r3, pc}
	}     else if (voltAsPercent == 2) {         
		ledOn = 0b11;     
 340:	e3a00003 	mov	r0, #3
 344:	e8bd8008 	pop	{r3, pc}
	}     else if (voltAsPercent == 3) {         
		ledOn = 0b111;     
 348:	e3a00007 	mov	r0, #7
 34c:	e8bd8008 	pop	{r3, pc}
	}     else if (voltAsPercent == 4) {         
		ledOn = 0b1111;     
 350:	e3a0000f 	mov	r0, #15
 354:	e8bd8008 	pop	{r3, pc}
	}     else if (voltAsPercent == 5) {         
		ledOn = 0b11111;     
 358:	e3a0001f 	mov	r0, #31
 35c:	e8bd8008 	pop	{r3, pc}
	}     else if (voltAsPercent == 6) {         
			ledOn = 0b111111;     
 360:	e3a0003f 	mov	r0, #63	; 0x3f
 364:	e8bd8008 	pop	{r3, pc}
	}     else if (voltAsPercent == 7) {         
		ledOn = 0b1111111;    
 368:	e3a0007f 	mov	r0, #127	; 0x7f
 36c:	e8bd8008 	pop	{r3, pc}
    }     else if (voltAsPercent == 8) {
		         ledOn = 0b11111111;     
 370:	e3a000ff 	mov	r0, #255	; 0xff
		ledOn = 0b111111111;     
	} else {
        ledOn = 0b1111111111;
    }
	return ledOn; 
} 
 374:	e8bd8008 	pop	{r3, pc}

00000378 <buttonsCheck>:

int buttonsCheck(void ){
	volatile int * button = (int*)KEY_BASE;

	int buttonValue =* button;
 378:	e3a03000 	mov	r3, #0
 37c:	e34f3f20 	movt	r3, #65312	; 0xff20
 380:	e5930050 	ldr	r0, [r3, #80]	; 0x50

	return buttonValue;
}
 384:	e12fff1e 	bx	lr

00000388 <switchCheck>:

int switchCheck(void){
	volatile int * switchPointer = (int*)SW_BASE;

	int switchValue = *switchPointer;
 388:	e3a03000 	mov	r3, #0
 38c:	e34f3f20 	movt	r3, #65312	; 0xff20
 390:	e5930040 	ldr	r0, [r3, #64]	; 0x40
	switchValue &= 1;
    
	return (switchValue);
}
 394:	e2000001 	and	r0, r0, #1
 398:	e12fff1e 	bx	lr

0000039c <checkTime>:

int checkTime(void){
	volatile int* status = (int*) TIMER_BASE;
	int timCout = *status&1;
 39c:	e3a03a02 	mov	r3, #8192	; 0x2000
 3a0:	e34f3f20 	movt	r3, #65312	; 0xff20
 3a4:	e5930000 	ldr	r0, [r3]

	if(timCout==1){
 3a8:	e2100001 	ands	r0, r0, #1
		*status = 0; // 00 just write to the status 
 3ac:	13a03a02 	movne	r3, #8192	; 0x2000
 3b0:	134f3f20 	movtne	r3, #65312	; 0xff20
 3b4:	13a02000 	movne	r2, #0
 3b8:	15832000 	strne	r2, [r3]
	}

	return (timCout);
}
 3bc:	e12fff1e 	bx	lr

000003c0 <stopTimer>:
 
void stopTimer(){
	volatile int * control  = (int*)(TIMER_BASE + 4);
	*control = 8; // 1000 
 3c0:	e3a03a02 	mov	r3, #8192	; 0x2000
 3c4:	e34f3f20 	movt	r3, #65312	; 0xff20
 3c8:	e3a02008 	mov	r2, #8
 3cc:	e5832004 	str	r2, [r3, #4]
 3d0:	e12fff1e 	bx	lr

000003d4 <startTimer>:
void startTimer(void){
	volatile int * highPeriod = (int*)(TIMER_BASE + 12);
	volatile int * lowPeriod = (int*)(TIMER_BASE + 8);
	volatile int * control = (int*)(TIMER_BASE + 4);

	*lowPeriod = 100 * 10000;
 3d4:	e3a03a02 	mov	r3, #8192	; 0x2000
 3d8:	e34f3f20 	movt	r3, #65312	; 0xff20
 3dc:	e3042240 	movw	r2, #16960	; 0x4240
 3e0:	e340200f 	movt	r2, #15
 3e4:	e5832008 	str	r2, [r3, #8]

	int val = 100 * 10000;
	*highPeriod = val>>16;
 3e8:	e3a0200f 	mov	r2, #15
 3ec:	e583200c 	str	r2, [r3, #12]

	*control = 6; // 0110
 3f0:	e3a02006 	mov	r2, #6
 3f4:	e5832004 	str	r2, [r3, #4]
 3f8:	e12fff1e 	bx	lr

000003fc <showTimer>:
}

void showTimer(int val){
 3fc:	e92d0030 	push	{r4, r5}
 400:	e24dd010 	sub	sp, sp, #16
 404:	e1a0c000 	mov	ip, r0
	volatile int * displayOne = (int*)HEX3_HEX0_BASE;
	volatile int * displayTwo = (int*)HEX5_HEX4_BASE;
	unsigned char map[16] = {
 408:	e3003c48 	movw	r3, #3144	; 0xc48
 40c:	e3403000 	movt	r3, #0
 410:	e1a0400d 	mov	r4, sp
 414:	e5930000 	ldr	r0, [r3]
 418:	e5931004 	ldr	r1, [r3, #4]
 41c:	e5932008 	ldr	r2, [r3, #8]
 420:	e593300c 	ldr	r3, [r3, #12]
 424:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    int minOne = (val/60000);
    int minTwo = ((val%60000)/6000);
    int secOne = ((val%6000)/1000);
    int secTwo = ((val%1000)/100);
    int msecOne = ((val%100)/10);
    int msecTwo = (val%10);
 428:	e3062667 	movw	r2, #26215	; 0x6667
 42c:	e3462666 	movt	r2, #26214	; 0x6666
 430:	e0c10c92 	smull	r0, r1, r2, ip
 434:	e1a03fcc 	asr	r3, ip, #31
 438:	e0631141 	rsb	r1, r3, r1, asr #2
 43c:	e0811101 	add	r1, r1, r1, lsl #2
 440:	e04c1081 	sub	r1, ip, r1, lsl #1
    
    *displayOne = (map[msecTwo] + (map[msecOne]<<8) + (map[secTwo]<<16) + (map[secOne]<<24));
 444:	e0841001 	add	r1, r4, r1
 448:	e5514010 	ldrb	r4, [r1, #-16]
    
    int minOne = (val/60000);
    int minTwo = ((val%60000)/6000);
    int secOne = ((val%6000)/1000);
    int secTwo = ((val%1000)/100);
    int msecOne = ((val%100)/10);
 44c:	e308151f 	movw	r1, #34079	; 0x851f
 450:	e34511eb 	movt	r1, #20971	; 0x51eb
 454:	e0c05c91 	smull	r5, r0, r1, ip
 458:	e06302c0 	rsb	r0, r3, r0, asr #5
 45c:	e3a05064 	mov	r5, #100	; 0x64
 460:	e060c095 	mls	r0, r5, r0, ip
 464:	e0c25092 	smull	r5, r2, r2, r0
 468:	e1a00fc0 	asr	r0, r0, #31
 46c:	e0602142 	rsb	r2, r0, r2, asr #2
    int msecTwo = (val%10);
    
    *displayOne = (map[msecTwo] + (map[msecOne]<<8) + (map[secTwo]<<16) + (map[secOne]<<24));
 470:	e28d0010 	add	r0, sp, #16
 474:	e0802002 	add	r2, r0, r2
 478:	e5520010 	ldrb	r0, [r2, #-16]
 47c:	e0844400 	add	r4, r4, r0, lsl #8
        0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
    
    int minOne = (val/60000);
    int minTwo = ((val%60000)/6000);
    int secOne = ((val%6000)/1000);
    int secTwo = ((val%1000)/100);
 480:	e3042dd3 	movw	r2, #19923	; 0x4dd3
 484:	e3412062 	movt	r2, #4194	; 0x1062
 488:	e0c05c92 	smull	r5, r0, r2, ip
 48c:	e0630340 	rsb	r0, r3, r0, asr #6
 490:	e3a05ffa 	mov	r5, #1000	; 0x3e8
 494:	e060c095 	mls	r0, r5, r0, ip
 498:	e0c15091 	smull	r5, r1, r1, r0
 49c:	e1a00fc0 	asr	r0, r0, #31
 4a0:	e06012c1 	rsb	r1, r0, r1, asr #5
    int msecOne = ((val%100)/10);
    int msecTwo = (val%10);
    
    *displayOne = (map[msecTwo] + (map[msecOne]<<8) + (map[secTwo]<<16) + (map[secOne]<<24));
 4a4:	e28d0010 	add	r0, sp, #16
 4a8:	e0801001 	add	r1, r0, r1
 4ac:	e5510010 	ldrb	r0, [r1, #-16]
 4b0:	e0844800 	add	r4, r4, r0, lsl #16
        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F,
        0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
    
    int minOne = (val/60000);
    int minTwo = ((val%60000)/6000);
    int secOne = ((val%6000)/1000);
 4b4:	e30119f1 	movw	r1, #6641	; 0x19f1
 4b8:	e3401576 	movt	r1, #1398	; 0x576
 4bc:	e0c05c91 	smull	r5, r0, r1, ip
 4c0:	e06303c0 	rsb	r0, r3, r0, asr #7
 4c4:	e3015770 	movw	r5, #6000	; 0x1770
 4c8:	e060c095 	mls	r0, r5, r0, ip
 4cc:	e0c25092 	smull	r5, r2, r2, r0
 4d0:	e1a00fc0 	asr	r0, r0, #31
 4d4:	e0602342 	rsb	r2, r0, r2, asr #6
    int secTwo = ((val%1000)/100);
    int msecOne = ((val%100)/10);
    int msecTwo = (val%10);
    
    *displayOne = (map[msecTwo] + (map[msecOne]<<8) + (map[secTwo]<<16) + (map[secOne]<<24));
 4d8:	e28d0010 	add	r0, sp, #16
 4dc:	e0802002 	add	r2, r0, r2
 4e0:	e5520010 	ldrb	r0, [r2, #-16]
 4e4:	e0840c00 	add	r0, r4, r0, lsl #24
 4e8:	e3a02000 	mov	r2, #0
 4ec:	e34f2f20 	movt	r2, #65312	; 0xff20
 4f0:	e5820020 	str	r0, [r2, #32]
	unsigned char map[16] = {
        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F,
        0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
    
    int minOne = (val/60000);
    int minTwo = ((val%60000)/6000);
 4f4:	e30b0273 	movw	r0, #45683	; 0xb273
 4f8:	e34405e7 	movt	r0, #17895	; 0x45e7
 4fc:	e0c04c90 	smull	r4, r0, r0, ip
 500:	e0633740 	rsb	r3, r3, r0, asr #14
 504:	e30e0a60 	movw	r0, #60000	; 0xea60
 508:	e06cc390 	mls	ip, r0, r3, ip
 50c:	e0c15c91 	smull	r5, r1, r1, ip
 510:	e1a0cfcc 	asr	ip, ip, #31
 514:	e06cc3c1 	rsb	ip, ip, r1, asr #7
    int secTwo = ((val%1000)/100);
    int msecOne = ((val%100)/10);
    int msecTwo = (val%10);
    
    *displayOne = (map[msecTwo] + (map[msecOne]<<8) + (map[secTwo]<<16) + (map[secOne]<<24));
    *displayTwo = (map[minTwo] + (map[minOne]<<8));	
 518:	e28d0010 	add	r0, sp, #16
 51c:	e080c00c 	add	ip, r0, ip
 520:	e55c1010 	ldrb	r1, [ip, #-16]
 524:	e0803003 	add	r3, r0, r3
 528:	e5533010 	ldrb	r3, [r3, #-16]
 52c:	e0813403 	add	r3, r1, r3, lsl #8
 530:	e5823030 	str	r3, [r2, #48]	; 0x30
}
 534:	e28dd010 	add	sp, sp, #16
 538:	e8bd0030 	pop	{r4, r5}
 53c:	e12fff1e 	bx	lr

00000540 <checkADC>:

int checkADC(void){     
	int bitCheck;     
	bitCheck = adc_ptr->ch0 & 1<16;     
 540:	e3a03901 	mov	r3, #16384	; 0x4000
 544:	e34f3f20 	movt	r3, #65312	; 0xff20
 548:	e5930000 	ldr	r0, [r3]
	return bitCheck; 
}
 54c:	e2000001 	and	r0, r0, #1
 550:	e12fff1e 	bx	lr

00000554 <main>:

int main() {
 554:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 558:	e24dd00c 	sub	sp, sp, #12

    int totalTime = 0;

    int weightRead = 0;

    gpio_ptr->control = 0x3FF;
 55c:	e3a03000 	mov	r3, #0
 560:	e34f3f20 	movt	r3, #65312	; 0xff20
 564:	e30023ff 	movw	r2, #1023	; 0x3ff
 568:	e5832064 	str	r2, [r3, #100]	; 0x64
    gpio_ptr->data = 0b0000000000;
 56c:	e3a06000 	mov	r6, #0
 570:	e5836060 	str	r6, [r3, #96]	; 0x60

    adc_ptr->ch1 = 0x1;
 574:	e3a03901 	mov	r3, #16384	; 0x4000
 578:	e34f3f20 	movt	r3, #65312	; 0xff20
 57c:	e3a02001 	mov	r2, #1
 580:	e5832004 	str	r2, [r3, #4]
	int instruction = 0;
	int countedTime = 0;

    int totalTime = 0;

    int weightRead = 0;
 584:	e58d6004 	str	r6, [sp, #4]
	int paused = 0;
	int lapTime = 0;
	int instruction = 0;
	int countedTime = 0;

    int totalTime = 0;
 588:	e1a0b006 	mov	fp, r6
int main() {
	int prevInstruction = 0;
	int paused = 0;
	int lapTime = 0;
	int instruction = 0;
	int countedTime = 0;
 58c:	e1a07006 	mov	r7, r6
	return bitCheck; 
}

int main() {
	int prevInstruction = 0;
	int paused = 0;
 590:	e1a09006 	mov	r9, r6
                stopTimer();
                countedTime = totalTime;
                paused = 0;
            } else {
                int ledOn = voltageToPercent(countedTime, totalTime);
                gpio_ptr->data = ledOn; 
 594:	e1a05006 	mov	r5, r6
 598:	e34f5f20 	movt	r5, #65312	; 0xff20
                if(checkADC()) {
                    weightRead = readVoltage(0);
 59c:	e1a0a006 	mov	sl, r6
                while (flash > 1) {
                    if (checkTime() == 1){
                        flash--;
                    }
                    int flashStatus = 1;
                    gpio_ptr->data = 0b1111111111;
 5a0:	e30083ff 	movw	r8, #1023	; 0x3ff

    adc_ptr->ch1 = 0x1;
    
    while (1) 
	{
		if(checkTime() == 1){
 5a4:	ebffff7c 	bl	39c <checkTime>
 5a8:	e3500001 	cmp	r0, #1
 5ac:	1a00001f 	bne	630 <main+0xdc>
            if (countedTime == 0){ //stop the count organically
 5b0:	e3570000 	cmp	r7, #0
 5b4:	1a00000c 	bne	5ec <main+0x98>
 5b8:	e300412b 	movw	r4, #299	; 0x12b
                int flash = 299;
                while (flash > 1) {
                    if (checkTime() == 1){
 5bc:	ebffff76 	bl	39c <checkTime>
 5c0:	e3500001 	cmp	r0, #1
                        flash--;
 5c4:	02444001 	subeq	r4, r4, #1
                    }
                    int flashStatus = 1;
                    gpio_ptr->data = 0b1111111111;
 5c8:	e5858060 	str	r8, [r5, #96]	; 0x60

                    if ((flash & 50) == 0) {
 5cc:	e3140032 	tst	r4, #50	; 0x32
                        //printf("FLASH FLASH\n");
                        //showTimer(99999);
                        if (flashStatus == 1){
                            gpio_ptr->data = 0b0000000000;
 5d0:	0585a060 	streq	sl, [r5, #96]	; 0x60
    while (1) 
	{
		if(checkTime() == 1){
            if (countedTime == 0){ //stop the count organically
                int flash = 299;
                while (flash > 1) {
 5d4:	e3540001 	cmp	r4, #1
 5d8:	cafffff7 	bgt	5bc <main+0x68>
                            //showTimer(0);
                            flashStatus = 1;
                        }
                    }
                }
                stopTimer();
 5dc:	ebffff77 	bl	3c0 <stopTimer>
                countedTime = totalTime;
 5e0:	e1a0700b 	mov	r7, fp
                paused = 0;
 5e4:	e1a0900a 	mov	r9, sl
 5e8:	ea000010 	b	630 <main+0xdc>
            } else {
                int ledOn = voltageToPercent(countedTime, totalTime);
 5ec:	e1a00007 	mov	r0, r7
 5f0:	e1a0100b 	mov	r1, fp
 5f4:	ebffff31 	bl	2c0 <voltageToPercent>
                gpio_ptr->data = ledOn; 
 5f8:	e5850060 	str	r0, [r5, #96]	; 0x60
                if(checkADC()) {
 5fc:	ebffffcf 	bl	540 <checkADC>
 600:	e3500000 	cmp	r0, #0
 604:	0a000002 	beq	614 <main+0xc0>
                    weightRead = readVoltage(0);
 608:	e1a0000a 	mov	r0, sl
 60c:	ebffff1b 	bl	280 <readVoltage>
 610:	e58d0004 	str	r0, [sp, #4]
                }
                if (switchCheck() == 1 || weightRead > (4096/2)){
 614:	ebffff5b 	bl	388 <switchCheck>
 618:	e3500001 	cmp	r0, #1
 61c:	0a000002 	beq	62c <main+0xd8>
 620:	e59d3004 	ldr	r3, [sp, #4]
 624:	e3530b02 	cmp	r3, #2048	; 0x800
 628:	da000000 	ble	630 <main+0xdc>
                    countedTime--;
 62c:	e2477001 	sub	r7, r7, #1
                }
            }
		}

		instruction = buttonsCheck();
 630:	ebffff50 	bl	378 <buttonsCheck>
 634:	e1a04000 	mov	r4, r0

		if(((instruction&1)==1) && ((prevInstruction&1)!=1) && (paused==0)){ //count down
 638:	e3100001 	tst	r0, #1
 63c:	0a000005 	beq	658 <main+0x104>
 640:	e2063001 	and	r3, r6, #1
 644:	e1993003 	orrs	r3, r9, r3
 648:	1a000002 	bne	658 <main+0x104>
			startTimer();
 64c:	ebffff60 	bl	3d4 <startTimer>
			paused = 1;   
 650:	e3a09001 	mov	r9, #1
 654:	ea000016 	b	6b4 <main+0x160>
		}
		else if(((instruction&2)==2) && ((prevInstruction&2)!=2) && (paused==1)){ //pause count down
 658:	e3140002 	tst	r4, #2
 65c:	0a000006 	beq	67c <main+0x128>
 660:	e3160002 	tst	r6, #2
 664:	1a000004 	bne	67c <main+0x128>
 668:	e3590001 	cmp	r9, #1
 66c:	1a000002 	bne	67c <main+0x128>
			stopTimer();
 670:	ebffff52 	bl	3c0 <stopTimer>
			paused = 0;
 674:	e1a0900a 	mov	r9, sl
 678:	ea00000d 	b	6b4 <main+0x160>
		}
		else if(((instruction&4)==4) && ((prevInstruction&4)!=4)) { //add time to count down
 67c:	e3140004 	tst	r4, #4
 680:	0a000003 	beq	694 <main+0x140>
 684:	e3160004 	tst	r6, #4
			countedTime += 100;
 688:	02877064 	addeq	r7, r7, #100	; 0x64
            totalTime += 100;
 68c:	028bb064 	addeq	fp, fp, #100	; 0x64
		}
		else if(((instruction&2)==2) && ((prevInstruction&2)!=2) && (paused==1)){ //pause count down
			stopTimer();
			paused = 0;
		}
		else if(((instruction&4)==4) && ((prevInstruction&4)!=4)) { //add time to count down
 690:	0a000007 	beq	6b4 <main+0x160>
			countedTime += 100;
            totalTime += 100;
		}
		else if(((instruction&8)==8) && ((prevInstruction&8)!=8)) { //reset count down
 694:	e3140008 	tst	r4, #8
 698:	0a000005 	beq	6b4 <main+0x160>
 69c:	e3160008 	tst	r6, #8
 6a0:	1a000003 	bne	6b4 <main+0x160>
			countedTime = 0;
			lapTime = 0;

			stopTimer();
 6a4:	ebffff45 	bl	3c0 <stopTimer>
			paused = 0;
            totalTime = 0;
 6a8:	e1a0b00a 	mov	fp, sl
		else if(((instruction&4)==4) && ((prevInstruction&4)!=4)) { //add time to count down
			countedTime += 100;
            totalTime += 100;
		}
		else if(((instruction&8)==8) && ((prevInstruction&8)!=8)) { //reset count down
			countedTime = 0;
 6ac:	e1a0700a 	mov	r7, sl
			lapTime = 0;

			stopTimer();
			paused = 0;
 6b0:	e1a0900a 	mov	r9, sl
            totalTime = 0;
		}

		prevInstruction = instruction;

		showTimer(countedTime);
 6b4:	e1a00007 	mov	r0, r7
 6b8:	ebffff4f 	bl	3fc <showTimer>
			stopTimer();
			paused = 0;
            totalTime = 0;
		}

		prevInstruction = instruction;
 6bc:	e1a06004 	mov	r6, r4

		showTimer(countedTime);
    }
 6c0:	eaffffb7 	b	5a4 <main+0x50>

000006c4 <__aeabi_idiv>:
 6c4:	e3510000 	cmp	r1, #0
 6c8:	0a000043 	beq	7dc <.divsi3_skip_div0_test+0x110>

000006cc <.divsi3_skip_div0_test>:
 6cc:	e020c001 	eor	ip, r0, r1
 6d0:	42611000 	rsbmi	r1, r1, #0
 6d4:	e2512001 	subs	r2, r1, #1
 6d8:	0a000027 	beq	77c <.divsi3_skip_div0_test+0xb0>
 6dc:	e1b03000 	movs	r3, r0
 6e0:	42603000 	rsbmi	r3, r0, #0
 6e4:	e1530001 	cmp	r3, r1
 6e8:	9a000026 	bls	788 <.divsi3_skip_div0_test+0xbc>
 6ec:	e1110002 	tst	r1, r2
 6f0:	0a000028 	beq	798 <.divsi3_skip_div0_test+0xcc>
 6f4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 6f8:	01a01181 	lsleq	r1, r1, #3
 6fc:	03a02008 	moveq	r2, #8
 700:	13a02001 	movne	r2, #1
 704:	e3510201 	cmp	r1, #268435456	; 0x10000000
 708:	31510003 	cmpcc	r1, r3
 70c:	31a01201 	lslcc	r1, r1, #4
 710:	31a02202 	lslcc	r2, r2, #4
 714:	3afffffa 	bcc	704 <.divsi3_skip_div0_test+0x38>
 718:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 71c:	31510003 	cmpcc	r1, r3
 720:	31a01081 	lslcc	r1, r1, #1
 724:	31a02082 	lslcc	r2, r2, #1
 728:	3afffffa 	bcc	718 <.divsi3_skip_div0_test+0x4c>
 72c:	e3a00000 	mov	r0, #0
 730:	e1530001 	cmp	r3, r1
 734:	20433001 	subcs	r3, r3, r1
 738:	21800002 	orrcs	r0, r0, r2
 73c:	e15300a1 	cmp	r3, r1, lsr #1
 740:	204330a1 	subcs	r3, r3, r1, lsr #1
 744:	218000a2 	orrcs	r0, r0, r2, lsr #1
 748:	e1530121 	cmp	r3, r1, lsr #2
 74c:	20433121 	subcs	r3, r3, r1, lsr #2
 750:	21800122 	orrcs	r0, r0, r2, lsr #2
 754:	e15301a1 	cmp	r3, r1, lsr #3
 758:	204331a1 	subcs	r3, r3, r1, lsr #3
 75c:	218001a2 	orrcs	r0, r0, r2, lsr #3
 760:	e3530000 	cmp	r3, #0
 764:	11b02222 	lsrsne	r2, r2, #4
 768:	11a01221 	lsrne	r1, r1, #4
 76c:	1affffef 	bne	730 <.divsi3_skip_div0_test+0x64>
 770:	e35c0000 	cmp	ip, #0
 774:	42600000 	rsbmi	r0, r0, #0
 778:	e12fff1e 	bx	lr
 77c:	e13c0000 	teq	ip, r0
 780:	42600000 	rsbmi	r0, r0, #0
 784:	e12fff1e 	bx	lr
 788:	33a00000 	movcc	r0, #0
 78c:	01a00fcc 	asreq	r0, ip, #31
 790:	03800001 	orreq	r0, r0, #1
 794:	e12fff1e 	bx	lr
 798:	e3510801 	cmp	r1, #65536	; 0x10000
 79c:	21a01821 	lsrcs	r1, r1, #16
 7a0:	23a02010 	movcs	r2, #16
 7a4:	33a02000 	movcc	r2, #0
 7a8:	e3510c01 	cmp	r1, #256	; 0x100
 7ac:	21a01421 	lsrcs	r1, r1, #8
 7b0:	22822008 	addcs	r2, r2, #8
 7b4:	e3510010 	cmp	r1, #16
 7b8:	21a01221 	lsrcs	r1, r1, #4
 7bc:	22822004 	addcs	r2, r2, #4
 7c0:	e3510004 	cmp	r1, #4
 7c4:	82822003 	addhi	r2, r2, #3
 7c8:	908220a1 	addls	r2, r2, r1, lsr #1
 7cc:	e35c0000 	cmp	ip, #0
 7d0:	e1a00233 	lsr	r0, r3, r2
 7d4:	42600000 	rsbmi	r0, r0, #0
 7d8:	e12fff1e 	bx	lr
 7dc:	e3500000 	cmp	r0, #0
 7e0:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 7e4:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 7e8:	ea000007 	b	80c <__aeabi_idiv0>

000007ec <__aeabi_idivmod>:
 7ec:	e3510000 	cmp	r1, #0
 7f0:	0afffff9 	beq	7dc <.divsi3_skip_div0_test+0x110>
 7f4:	e92d4003 	push	{r0, r1, lr}
 7f8:	ebffffb3 	bl	6cc <.divsi3_skip_div0_test>
 7fc:	e8bd4006 	pop	{r1, r2, lr}
 800:	e0030092 	mul	r3, r2, r0
 804:	e0411003 	sub	r1, r1, r3
 808:	e12fff1e 	bx	lr

0000080c <__aeabi_idiv0>:
 80c:	e12fff1e 	bx	lr

00000810 <atexit>:
 810:	e1a01000 	mov	r1, r0
 814:	e3a00000 	mov	r0, #0
 818:	e92d4008 	push	{r3, lr}
 81c:	e1a02000 	mov	r2, r0
 820:	e1a03000 	mov	r3, r0
 824:	eb00000e 	bl	864 <__register_exitproc>
 828:	e8bd4008 	pop	{r3, lr}
 82c:	e12fff1e 	bx	lr

00000830 <exit>:
 830:	e92d4008 	push	{r3, lr}
 834:	e3a01000 	mov	r1, #0
 838:	e1a04000 	mov	r4, r0
 83c:	eb000045 	bl	958 <__call_exitprocs>
 840:	e59f3018 	ldr	r3, [pc, #24]	; 860 <exit+0x30>
 844:	e5930000 	ldr	r0, [r3]
 848:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 84c:	e3530000 	cmp	r3, #0
 850:	11a0e00f 	movne	lr, pc
 854:	112fff13 	bxne	r3
 858:	e1a00004 	mov	r0, r4
 85c:	eb0000c9 	bl	b88 <_exit>
 860:	00000c60 	.word	0x00000c60

00000864 <__register_exitproc>:
 864:	e59fc0e4 	ldr	ip, [pc, #228]	; 950 <__register_exitproc+0xec>
 868:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 86c:	e59c4000 	ldr	r4, [ip]
 870:	e594c148 	ldr	ip, [r4, #328]	; 0x148
 874:	e35c0000 	cmp	ip, #0
 878:	0284cf53 	addeq	ip, r4, #332	; 0x14c
 87c:	e59c5004 	ldr	r5, [ip, #4]
 880:	0584c148 	streq	ip, [r4, #328]	; 0x148
 884:	e355001f 	cmp	r5, #31
 888:	e24dd010 	sub	sp, sp, #16
 88c:	e1a06000 	mov	r6, r0
 890:	da000015 	ble	8ec <__register_exitproc+0x88>
 894:	e59f00b8 	ldr	r0, [pc, #184]	; 954 <__register_exitproc+0xf0>
 898:	e3500000 	cmp	r0, #0
 89c:	1a000001 	bne	8a8 <__register_exitproc+0x44>
 8a0:	e3e00000 	mvn	r0, #0
 8a4:	ea000018 	b	90c <__register_exitproc+0xa8>
 8a8:	e3a00e19 	mov	r0, #400	; 0x190
 8ac:	e58d100c 	str	r1, [sp, #12]
 8b0:	e58d2008 	str	r2, [sp, #8]
 8b4:	e58d3004 	str	r3, [sp, #4]
 8b8:	e320f000 	nop	{0}
 8bc:	e250c000 	subs	ip, r0, #0
 8c0:	e59d100c 	ldr	r1, [sp, #12]
 8c4:	e59d2008 	ldr	r2, [sp, #8]
 8c8:	e59d3004 	ldr	r3, [sp, #4]
 8cc:	0afffff3 	beq	8a0 <__register_exitproc+0x3c>
 8d0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 8d4:	e3a00000 	mov	r0, #0
 8d8:	e58c0004 	str	r0, [ip, #4]
 8dc:	e58c5000 	str	r5, [ip]
 8e0:	e584c148 	str	ip, [r4, #328]	; 0x148
 8e4:	e58c0188 	str	r0, [ip, #392]	; 0x188
 8e8:	e58c018c 	str	r0, [ip, #396]	; 0x18c
 8ec:	e3560000 	cmp	r6, #0
 8f0:	e59c4004 	ldr	r4, [ip, #4]
 8f4:	1a000007 	bne	918 <__register_exitproc+0xb4>
 8f8:	e2843002 	add	r3, r4, #2
 8fc:	e2844001 	add	r4, r4, #1
 900:	e78c1103 	str	r1, [ip, r3, lsl #2]
 904:	e58c4004 	str	r4, [ip, #4]
 908:	e3a00000 	mov	r0, #0
 90c:	e28dd010 	add	sp, sp, #16
 910:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 914:	e12fff1e 	bx	lr
 918:	e3a00001 	mov	r0, #1
 91c:	e1a00410 	lsl	r0, r0, r4
 920:	e08c8104 	add	r8, ip, r4, lsl #2
 924:	e3560002 	cmp	r6, #2
 928:	e59c7188 	ldr	r7, [ip, #392]	; 0x188
 92c:	e5883108 	str	r3, [r8, #264]	; 0x108
 930:	059c318c 	ldreq	r3, [ip, #396]	; 0x18c
 934:	e1877000 	orr	r7, r7, r0
 938:	01830000 	orreq	r0, r3, r0
 93c:	e1a05008 	mov	r5, r8
 940:	e5882088 	str	r2, [r8, #136]	; 0x88
 944:	e58c7188 	str	r7, [ip, #392]	; 0x188
 948:	058c018c 	streq	r0, [ip, #396]	; 0x18c
 94c:	eaffffe9 	b	8f8 <__register_exitproc+0x94>
 950:	00000c60 	.word	0x00000c60
 954:	00000000 	.word	0x00000000

00000958 <__call_exitprocs>:
 958:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 95c:	e59f3168 	ldr	r3, [pc, #360]	; acc <__call_exitprocs+0x174>
 960:	e5933000 	ldr	r3, [r3]
 964:	e24dd014 	sub	sp, sp, #20
 968:	e58d3004 	str	r3, [sp, #4]
 96c:	e2833f52 	add	r3, r3, #328	; 0x148
 970:	e58d0008 	str	r0, [sp, #8]
 974:	e58d300c 	str	r3, [sp, #12]
 978:	e1a07001 	mov	r7, r1
 97c:	e3a08001 	mov	r8, #1
 980:	e59d3004 	ldr	r3, [sp, #4]
 984:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 988:	e3560000 	cmp	r6, #0
 98c:	e59db00c 	ldr	fp, [sp, #12]
 990:	0a000033 	beq	a64 <__call_exitprocs+0x10c>
 994:	e5965004 	ldr	r5, [r6, #4]
 998:	e2554001 	subs	r4, r5, #1
 99c:	5286a088 	addpl	sl, r6, #136	; 0x88
 9a0:	5285501f 	addpl	r5, r5, #31
 9a4:	508a5105 	addpl	r5, sl, r5, lsl #2
 9a8:	5a000007 	bpl	9cc <__call_exitprocs+0x74>
 9ac:	ea000029 	b	a58 <__call_exitprocs+0x100>
 9b0:	e5953000 	ldr	r3, [r5]
 9b4:	e1530007 	cmp	r3, r7
 9b8:	0a000005 	beq	9d4 <__call_exitprocs+0x7c>
 9bc:	e2444001 	sub	r4, r4, #1
 9c0:	e3740001 	cmn	r4, #1
 9c4:	e2455004 	sub	r5, r5, #4
 9c8:	0a000022 	beq	a58 <__call_exitprocs+0x100>
 9cc:	e3570000 	cmp	r7, #0
 9d0:	1afffff6 	bne	9b0 <__call_exitprocs+0x58>
 9d4:	e5963004 	ldr	r3, [r6, #4]
 9d8:	e06a2005 	rsb	r2, sl, r5
 9dc:	e2433001 	sub	r3, r3, #1
 9e0:	e0862002 	add	r2, r6, r2
 9e4:	e1530004 	cmp	r3, r4
 9e8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 9ec:	13a01000 	movne	r1, #0
 9f0:	05864004 	streq	r4, [r6, #4]
 9f4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 9f8:	e3530000 	cmp	r3, #0
 9fc:	0affffee 	beq	9bc <__call_exitprocs+0x64>
 a00:	e1a02418 	lsl	r2, r8, r4
 a04:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 a08:	e1120001 	tst	r2, r1
 a0c:	e5969004 	ldr	r9, [r6, #4]
 a10:	0a000016 	beq	a70 <__call_exitprocs+0x118>
 a14:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 a18:	e1120001 	tst	r2, r1
 a1c:	1a000016 	bne	a7c <__call_exitprocs+0x124>
 a20:	e59d0008 	ldr	r0, [sp, #8]
 a24:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 a28:	e1a0e00f 	mov	lr, pc
 a2c:	e12fff13 	bx	r3
 a30:	e5963004 	ldr	r3, [r6, #4]
 a34:	e1530009 	cmp	r3, r9
 a38:	1affffd0 	bne	980 <__call_exitprocs+0x28>
 a3c:	e59b3000 	ldr	r3, [fp]
 a40:	e1530006 	cmp	r3, r6
 a44:	1affffcd 	bne	980 <__call_exitprocs+0x28>
 a48:	e2444001 	sub	r4, r4, #1
 a4c:	e3740001 	cmn	r4, #1
 a50:	e2455004 	sub	r5, r5, #4
 a54:	1affffdc 	bne	9cc <__call_exitprocs+0x74>
 a58:	e59f1070 	ldr	r1, [pc, #112]	; ad0 <__call_exitprocs+0x178>
 a5c:	e3510000 	cmp	r1, #0
 a60:	1a000009 	bne	a8c <__call_exitprocs+0x134>
 a64:	e28dd014 	add	sp, sp, #20
 a68:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 a6c:	e12fff1e 	bx	lr
 a70:	e1a0e00f 	mov	lr, pc
 a74:	e12fff13 	bx	r3
 a78:	eaffffec 	b	a30 <__call_exitprocs+0xd8>
 a7c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 a80:	e1a0e00f 	mov	lr, pc
 a84:	e12fff13 	bx	r3
 a88:	eaffffe8 	b	a30 <__call_exitprocs+0xd8>
 a8c:	e5963004 	ldr	r3, [r6, #4]
 a90:	e3530000 	cmp	r3, #0
 a94:	e5963000 	ldr	r3, [r6]
 a98:	1a000008 	bne	ac0 <__call_exitprocs+0x168>
 a9c:	e3530000 	cmp	r3, #0
 aa0:	0a000006 	beq	ac0 <__call_exitprocs+0x168>
 aa4:	e1a00006 	mov	r0, r6
 aa8:	e58b3000 	str	r3, [fp]
 aac:	e320f000 	nop	{0}
 ab0:	e59b6000 	ldr	r6, [fp]
 ab4:	e3560000 	cmp	r6, #0
 ab8:	1affffb5 	bne	994 <__call_exitprocs+0x3c>
 abc:	eaffffe8 	b	a64 <__call_exitprocs+0x10c>
 ac0:	e1a0b006 	mov	fp, r6
 ac4:	e1a06003 	mov	r6, r3
 ac8:	eafffff9 	b	ab4 <__call_exitprocs+0x15c>
 acc:	00000c60 	.word	0x00000c60
 ad0:	00000000 	.word	0x00000000

00000ad4 <register_fini>:
 ad4:	e92d4008 	push	{r3, lr}
 ad8:	e59f3010 	ldr	r3, [pc, #16]	; af0 <register_fini+0x1c>
 adc:	e3530000 	cmp	r3, #0
 ae0:	159f000c 	ldrne	r0, [pc, #12]	; af4 <register_fini+0x20>
 ae4:	1bffff49 	blne	810 <atexit>
 ae8:	e8bd4008 	pop	{r3, lr}
 aec:	e12fff1e 	bx	lr
 af0:	00000c88 	.word	0x00000c88
 af4:	00000af8 	.word	0x00000af8

00000af8 <__libc_fini_array>:
 af8:	e92d4038 	push	{r3, r4, r5, lr}
 afc:	e59f5030 	ldr	r5, [pc, #48]	; b34 <__libc_fini_array+0x3c>
 b00:	e59f4030 	ldr	r4, [pc, #48]	; b38 <__libc_fini_array+0x40>
 b04:	e0654004 	rsb	r4, r5, r4
 b08:	e1b04144 	asrs	r4, r4, #2
 b0c:	10855104 	addne	r5, r5, r4, lsl #2
 b10:	0a000004 	beq	b28 <__libc_fini_array+0x30>
 b14:	e5353004 	ldr	r3, [r5, #-4]!
 b18:	e1a0e00f 	mov	lr, pc
 b1c:	e12fff13 	bx	r3
 b20:	e2544001 	subs	r4, r4, #1
 b24:	1afffffa 	bne	b14 <__libc_fini_array+0x1c>
 b28:	eb000056 	bl	c88 <__libc_fini>
 b2c:	e8bd4038 	pop	{r3, r4, r5, lr}
 b30:	e12fff1e 	bx	lr
 b34:	00000ca0 	.word	0x00000ca0
 b38:	00000ca4 	.word	0x00000ca4

00000b3c <__cs3_premain>:
 b3c:	e92d4008 	push	{r3, lr}
 b40:	eb00001d 	bl	bbc <__libc_init_array>
 b44:	e59f3030 	ldr	r3, [pc, #48]	; b7c <__cs3_premain+0x40>
 b48:	e3530000 	cmp	r3, #0
 b4c:	15930000 	ldrne	r0, [r3]
 b50:	01a00003 	moveq	r0, r3
 b54:	e59f3024 	ldr	r3, [pc, #36]	; b80 <__cs3_premain+0x44>
 b58:	e3530000 	cmp	r3, #0
 b5c:	15931000 	ldrne	r1, [r3]
 b60:	01a01003 	moveq	r1, r3
 b64:	e3a02000 	mov	r2, #0
 b68:	ebfffe79 	bl	554 <main>
 b6c:	e59f3010 	ldr	r3, [pc, #16]	; b84 <__cs3_premain+0x48>
 b70:	e3530000 	cmp	r3, #0
 b74:	1bffff2d 	blne	830 <exit>
 b78:	eafffffe 	b	b78 <__cs3_premain+0x3c>
	...
 b84:	00000830 	.word	0x00000830

00000b88 <_exit>:
 b88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 b8c:	e3a00018 	mov	r0, #24
 b90:	e59f1004 	ldr	r1, [pc, #4]	; b9c <_exit+0x14>
 b94:	ef123456 	svc	0x00123456
 b98:	eafffffe 	b	b98 <_exit+0x10>
 b9c:	00020026 	.word	0x00020026

00000ba0 <__cs3_isr_interrupt>:
 ba0:	eafffffe 	b	ba0 <__cs3_isr_interrupt>

00000ba4 <__cs3_isr_undef>:
 ba4:	eafffffe 	b	ba4 <__cs3_isr_undef>

00000ba8 <__cs3_isr_swi>:
 ba8:	eafffffe 	b	ba8 <__cs3_isr_swi>

00000bac <__cs3_isr_pabort>:
 bac:	eafffffe 	b	bac <__cs3_isr_pabort>

00000bb0 <__cs3_isr_dabort>:
 bb0:	eafffffe 	b	bb0 <__cs3_isr_dabort>

00000bb4 <__cs3_isr_irq>:
 bb4:	eafffffe 	b	bb4 <__cs3_isr_irq>

00000bb8 <__cs3_isr_fiq>:
 bb8:	eafffffe 	b	bb8 <__cs3_isr_fiq>

00000bbc <__libc_init_array>:
 bbc:	e92d4070 	push	{r4, r5, r6, lr}
 bc0:	e59f506c 	ldr	r5, [pc, #108]	; c34 <__libc_init_array+0x78>
 bc4:	e59f606c 	ldr	r6, [pc, #108]	; c38 <__libc_init_array+0x7c>
 bc8:	e0656006 	rsb	r6, r5, r6
 bcc:	e1b06146 	asrs	r6, r6, #2
 bd0:	12455004 	subne	r5, r5, #4
 bd4:	13a04000 	movne	r4, #0
 bd8:	0a000005 	beq	bf4 <__libc_init_array+0x38>
 bdc:	e5b53004 	ldr	r3, [r5, #4]!
 be0:	e2844001 	add	r4, r4, #1
 be4:	e1a0e00f 	mov	lr, pc
 be8:	e12fff13 	bx	r3
 bec:	e1560004 	cmp	r6, r4
 bf0:	1afffff9 	bne	bdc <__libc_init_array+0x20>
 bf4:	e59f5040 	ldr	r5, [pc, #64]	; c3c <__libc_init_array+0x80>
 bf8:	e59f6040 	ldr	r6, [pc, #64]	; c40 <__libc_init_array+0x84>
 bfc:	e0656006 	rsb	r6, r5, r6
 c00:	eb000018 	bl	c68 <_init>
 c04:	e1b06146 	asrs	r6, r6, #2
 c08:	12455004 	subne	r5, r5, #4
 c0c:	13a04000 	movne	r4, #0
 c10:	0a000005 	beq	c2c <__libc_init_array+0x70>
 c14:	e5b53004 	ldr	r3, [r5, #4]!
 c18:	e2844001 	add	r4, r4, #1
 c1c:	e1a0e00f 	mov	lr, pc
 c20:	e12fff13 	bx	r3
 c24:	e1560004 	cmp	r6, r4
 c28:	1afffff9 	bne	c14 <__libc_init_array+0x58>
 c2c:	e8bd4070 	pop	{r4, r5, r6, lr}
 c30:	e12fff1e 	bx	lr
 c34:	00000c80 	.word	0x00000c80
 c38:	00000c80 	.word	0x00000c80
 c3c:	00000c80 	.word	0x00000c80
 c40:	00000c88 	.word	0x00000c88

Disassembly of section .rodata:

00000c48 <adc_ptr-0x10>:
 c48:	4f5b063f 	.word	0x4f5b063f
 c4c:	077d6d66 	.word	0x077d6d66
 c50:	7c776f7f 	.word	0x7c776f7f
 c54:	71795e39 	.word	0x71795e39

00000c58 <adc_ptr>:
 c58:	ff204000                                .@ .

00000c5c <gpio_ptr>:
 c5c:	ff200060                                `. .

00000c60 <_global_impure_ptr>:
 c60:	00000cc8 00000043                       ....C...

00000c68 <_init>:
 c68:	e1a0c00d 	mov	ip, sp
 c6c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 c70:	e24cb004 	sub	fp, ip, #4
 c74:	e24bd028 	sub	sp, fp, #40	; 0x28
 c78:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 c7c:	e12fff1e 	bx	lr

00000c80 <__init_array_start>:
 c80:	00000ad4 	.word	0x00000ad4

00000c84 <__frame_dummy_init_array_entry>:
 c84:	00000208                                ....

00000c88 <__libc_fini>:
 c88:	e1a0c00d 	mov	ip, sp
 c8c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 c90:	e24cb004 	sub	fp, ip, #4
 c94:	e24bd028 	sub	sp, fp, #40	; 0x28
 c98:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 c9c:	e12fff1e 	bx	lr

00000ca0 <__fini_array_start>:
 ca0:	000001c4 	.word	0x000001c4

00000ca4 <__cs3_regions>:
	...
 cb0:	000010f8 	.word	0x000010f8
 cb4:	00000020 	.word	0x00000020
